/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.4.0
 * Wed, 22 Nov 2023 03:00:14 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

var PL = {};
// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    
    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



var s;

/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}

/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && 'animFrameRate' in scene.userData) {
        return scene.userData.animFrameRate;
    }
    return 24;
}

function _checkListenersSame(target0, type0, listener0, optionsOrUseCapture0,
        target1, type1, listener1, optionsOrUseCapture1) {
    const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
            ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
    const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
            ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
    return target0 === target1 && type0 === type1 && listener0 === listener1
            && capture0 === capture1;
}

/**
 * Add the specified event listener to the specified target. This function also
 * stores listener data for easier disposing.
 */
function bindListener(target, type, listener, optionsOrUseCapture) {
    const alreadyExists = _pGlob.eventListeners.some(elem => {
        return _checkListenersSame(elem.target, elem.type, elem.listener,
                elem.optionsOrUseCapture, target, type, listener,
                optionsOrUseCapture);
    });

    if (!alreadyExists) {
        target.addEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.push({ target, type, listener, optionsOrUseCapture });
    }
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished)) {
            bindListener(appInstance.mixer, 'finished', onMixerFinished);
        }
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        bindListener(elem, eventType, callback);
    }
}

function findUniqueObjectName(name) {
    function objNameUsed(name) {
        return Boolean(getObjectByName(name));
    }
    while (objNameUsed(name)) {
        var r = name.match(/^(.*?)(\d+)$/);
        if (!r) {
            name += "2";
        } else {
            name = r[1] + (parseInt(r[2], 10) + 1);
        }
    }
    return name;
}

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    if (appInstance.scene) {
        appInstance.scene.traverse(function(obj) {
            if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
                objFound = obj;
                if (runTime) {
                    _pGlob.objCache[objName] = objFound;
                }
            }
        });
    }
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}

// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objSelector, contents, id, name) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                // delete all childs of annotation
                child.traverse(function(child2) {
                    if (child2.isAnnotation)
                        child2.dispose();
                    });
                obj.remove(child);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = findUniqueObjectName(name ? name : annot);
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}

function getNoteNumber(note, octave) {
    return (12 + octave * 12 + note);
}

!function(window){"use strict";function WebAudioTinySynthCore(target){Object.assign(target,{properties:{masterVol:{type:Number,value:.5,observer:"setMasterVol"},reverbLev:{type:Number,value:.3,observer:"setReverbLev"},quality:{type:Number,value:1,observer:"setQuality"},debug:{type:Number,value:0},src:{type:String,value:null,observer:"loadMIDIfromSrc"},loop:{type:Number,value:0},internalcontext:{type:Number,value:1},tsmode:{type:Number,value:0},voices:{type:Number,value:64},useReverb:{type:Number,value:1},width:{type:String,value:"300px",observer:"layout"},height:{type:String,value:"32px",observer:"layout"},graph:{type:Number,value:1},disabledrop:{type:Number,value:0},perfmon:{type:Number,value:0}},layout:()=>{this.canvas.style.width=this.width,this.canvas.style.height=this.height},program:[{name:"Acoustic Grand Piano"},{name:"Bright Acoustic Piano"},{name:"Electric Grand Piano"},{name:"Honky-tonk Piano"},{name:"Electric Piano 1"},{name:"Electric Piano 2"},{name:"Harpsichord"},{name:"Clavi"},{name:"Celesta"},{name:"Glockenspiel"},{name:"Music Box"},{name:"Vibraphone"},{name:"Marimba"},{name:"Xylophone"},{name:"Tubular Bells"},{name:"Dulcimer"},{name:"Drawbar Organ"},{name:"Percussive Organ"},{name:"Rock Organ"},{name:"Church Organ"},{name:"Reed Organ"},{name:"Accordion"},{name:"Harmonica"},{name:"Tango Accordion"},{name:"Acoustic Guitar (nylon)"},{name:"Acoustic Guitar (steel)"},{name:"Electric Guitar (jazz)"},{name:"Electric Guitar (clean)"},{name:"Electric Guitar (muted)"},{name:"Overdriven Guitar"},{name:"Distortion Guitar"},{name:"Guitar harmonics"},{name:"Acoustic Bass"},{name:"Electric Bass (finger)"},{name:"Electric Bass (pick)"},{name:"Fretless Bass"},{name:"Slap Bass 1"},{name:"Slap Bass 2"},{name:"Synth Bass 1"},{name:"Synth Bass 2"},{name:"Violin"},{name:"Viola"},{name:"Cello"},{name:"Contrabass"},{name:"Tremolo Strings"},{name:"Pizzicato Strings"},{name:"Orchestral Harp"},{name:"Timpani"},{name:"String Ensemble 1"},{name:"String Ensemble 2"},{name:"SynthStrings 1"},{name:"SynthStrings 2"},{name:"Choir Aahs"},{name:"Voice Oohs"},{name:"Synth Voice"},{name:"Orchestra Hit"},{name:"Trumpet"},{name:"Trombone"},{name:"Tuba"},{name:"Muted Trumpet"},{name:"French Horn"},{name:"Brass Section"},{name:"SynthBrass 1"},{name:"SynthBrass 2"},{name:"Soprano Sax"},{name:"Alto Sax"},{name:"Tenor Sax"},{name:"Baritone Sax"},{name:"Oboe"},{name:"English Horn"},{name:"Bassoon"},{name:"Clarinet"},{name:"Piccolo"},{name:"Flute"},{name:"Recorder"},{name:"Pan Flute"},{name:"Blown Bottle"},{name:"Shakuhachi"},{name:"Whistle"},{name:"Ocarina"},{name:"Lead 1 (square)"},{name:"Lead 2 (sawtooth)"},{name:"Lead 3 (calliope)"},{name:"Lead 4 (chiff)"},{name:"Lead 5 (charang)"},{name:"Lead 6 (voice)"},{name:"Lead 7 (fifths)"},{name:"Lead 8 (bass + lead)"},{name:"Pad 1 (new age)"},{name:"Pad 2 (warm)"},{name:"Pad 3 (polysynth)"},{name:"Pad 4 (choir)"},{name:"Pad 5 (bowed)"},{name:"Pad 6 (metallic)"},{name:"Pad 7 (halo)"},{name:"Pad 8 (sweep)"},{name:"FX 1 (rain)"},{name:"FX 2 (soundtrack)"},{name:"FX 3 (crystal)"},{name:"FX 4 (atmosphere)"},{name:"FX 5 (brightness)"},{name:"FX 6 (goblins)"},{name:"FX 7 (echoes)"},{name:"FX 8 (sci-fi)"},{name:"Sitar"},{name:"Banjo"},{name:"Shamisen"},{name:"Koto"},{name:"Kalimba"},{name:"Bag pipe"},{name:"Fiddle"},{name:"Shanai"},{name:"Tinkle Bell"},{name:"Agogo"},{name:"Steel Drums"},{name:"Woodblock"},{name:"Taiko Drum"},{name:"Melodic Tom"},{name:"Synth Drum"},{name:"Reverse Cymbal"},{name:"Guitar Fret Noise"},{name:"Breath Noise"},{name:"Seashore"},{name:"Bird Tweet"},{name:"Telephone Ring"},{name:"Helicopter"},{name:"Applause"},{name:"Gunshot"}],drummap:[{name:"Acoustic Bass Drum"},{name:"Bass Drum 1"},{name:"Side Stick"},{name:"Acoustic Snare"},{name:"Hand Clap"},{name:"Electric Snare"},{name:"Low Floor Tom"},{name:"Closed Hi Hat"},{name:"High Floor Tom"},{name:"Pedal Hi-Hat"},{name:"Low Tom"},{name:"Open Hi-Hat"},{name:"Low-Mid Tom"},{name:"Hi-Mid Tom"},{name:"Crash Cymbal 1"},{name:"High Tom"},{name:"Ride Cymbal 1"},{name:"Chinese Cymbal"},{name:"Ride Bell"},{name:"Tambourine"},{name:"Splash Cymbal"},{name:"Cowbell"},{name:"Crash Cymbal 2"},{name:"Vibraslap"},{name:"Ride Cymbal 2"},{name:"Hi Bongo"},{name:"Low Bongo"},{name:"Mute Hi Conga"},{name:"Open Hi Conga"},{name:"Low Conga"},{name:"High Timbale"},{name:"Low Timbale"},{name:"High Agogo"},{name:"Low Agogo"},{name:"Cabasa"},{name:"Maracas"},{name:"Short Whistle"},{name:"Long Whistle"},{name:"Short Guiro"},{name:"Long Guiro"},{name:"Claves"},{name:"Hi Wood Block"},{name:"Low Wood Block"},{name:"Mute Cuica"},{name:"Open Cuica"},{name:"Mute Triangle"},{name:"Open Triangle"}],program1:[[{w:"sine",v:.4,d:.7,r:.1},{w:"triangle",v:3,d:.7,s:.1,g:1,a:.01,k:-1.2}],[{w:"triangle",v:.4,d:.7,r:.1},{w:"triangle",v:4,t:3,d:.4,s:.1,g:1,k:-1,a:.01}],[{w:"sine",d:.7,r:.1},{w:"triangle",v:4,f:2,d:.5,s:.5,g:1,k:-1}],[{w:"sine",d:.7,v:.2},{w:"triangle",v:4,t:3,f:2,d:.3,g:1,k:-1,a:.01,s:.5}],[{w:"sine",v:.35,d:.7},{w:"sine",v:3,t:7,f:1,d:1,s:1,g:1,k:-.7}],[{w:"sine",v:.35,d:.7},{w:"sine",v:8,t:7,f:1,d:.5,s:1,g:1,k:-.7}],[{w:"sawtooth",v:.34,d:2},{w:"sine",v:8,f:.1,d:2,s:1,r:2,g:1}],[{w:"triangle",v:.34,d:1.5},{w:"square",v:6,f:.1,d:1.5,s:.5,r:2,g:1}],[{w:"sine",d:.3,r:.3},{w:"sine",v:7,t:11,d:.03,g:1}],[{w:"sine",d:.3,r:.3},{w:"sine",v:11,t:6,d:.2,s:.4,g:1}],[{w:"sine",v:.2,d:.3,r:.3},{w:"sine",v:11,t:5,d:.1,s:.4,g:1}],[{w:"sine",v:.2,d:.6,r:.6},{w:"triangle",v:11,t:5,f:1,s:.5,g:1}],[{w:"sine",v:.3,d:.2,r:.2},{w:"sine",v:6,t:5,d:.02,g:1}],[{w:"sine",v:.3,d:.2,r:.2},{w:"sine",v:7,t:11,d:.03,g:1}],[{w:"sine",v:.2,d:1,r:1},{w:"sine",v:11,t:3.5,d:1,r:1,g:1}],[{w:"triangle",v:.2,d:.5,r:.2},{w:"sine",v:6,t:2.5,d:.2,s:.1,r:.2,g:1}],[{w:"w9999",v:.22,s:.9},{w:"w9999",v:.22,t:2,f:2,s:.9}],[{w:"w9999",v:.2,s:1},{w:"sine",v:11,t:6,f:2,s:.1,g:1,h:.006,r:.002,d:.002},{w:"w9999",v:.2,t:2,f:1,h:0,s:1}],[{w:"w9999",v:.2,d:.1,s:.9},{w:"w9999",v:.25,t:4,f:2,s:.5}],[{w:"w9999",v:.3,a:.04,s:.9},{w:"w9999",v:.2,t:8,f:2,a:.04,s:.9}],[{w:"sine",v:.2,a:.02,d:.05,s:1},{w:"sine",v:6,t:3,f:1,a:.02,d:.05,s:1,g:1}],[{w:"triangle",v:.2,a:.02,d:.05,s:.8},{w:"square",v:7,t:3,f:1,d:.05,s:1.5,g:1}],[{w:"square",v:.2,a:.02,d:.2,s:.5},{w:"square",v:1,d:.03,s:2,g:1}],[{w:"square",v:.2,a:.02,d:.1,s:.8},{w:"square",v:1,a:.3,d:.1,s:2,g:1}],[{w:"sine",v:.3,d:.5,f:1},{w:"triangle",v:5,t:3,f:-1,d:1,s:.1,g:1}],[{w:"sine",v:.4,d:.6,f:1},{w:"triangle",v:12,t:3,d:.6,s:.1,g:1,f:-1}],[{w:"triangle",v:.3,d:1,f:1},{w:"triangle",v:6,f:-1,d:.4,s:.5,g:1,t:3}],[{w:"sine",v:.3,d:1,f:-1},{w:"triangle",v:11,f:1,d:.4,s:.5,g:1,t:3}],[{w:"sine",v:.4,d:.1,r:.01},{w:"sine",v:7,g:1}],[{w:"triangle",v:.4,d:1,f:1},{w:"square",v:4,f:-1,d:1,s:.7,g:1}],[{w:"triangle",v:.35,d:1,f:1},{w:"square",v:7,f:-1,d:.3,s:.5,g:1}],[{w:"sine",v:.2,t:1.5,a:.005,h:.2,d:.6},{w:"sine",v:11,t:5,f:2,d:1,s:.5,g:1}],[{w:"sine",d:.3},{w:"sine",v:4,t:3,d:1,s:1,g:1}],[{w:"sine",d:.3},{w:"sine",v:4,t:3,d:1,s:1,g:1}],[{w:"w9999",d:.3,v:.7,s:.5},{w:"sawtooth",v:1.2,d:.02,s:.5,g:1,h:0,r:.02}],[{w:"sine",d:.3},{w:"sine",v:4,t:3,d:1,s:1,g:1}],[{w:"triangle",v:.3,t:2,d:1},{w:"triangle",v:15,t:2.5,d:.04,s:.1,g:1}],[{w:"triangle",v:.3,t:2,d:1},{w:"triangle",v:15,t:2.5,d:.04,s:.1,g:1}],[{w:"triangle",d:.7},{w:"square",v:.4,t:.5,f:1,d:.2,s:10,g:1}],[{w:"triangle",d:.7},{w:"square",v:.4,t:.5,f:1,d:.2,s:10,g:1}],[{w:"sawtooth",v:.4,a:.1,d:11},{w:"sine",v:5,d:11,s:.2,g:1}],[{w:"sawtooth",v:.4,a:.1,d:11},{w:"sine",v:5,d:11,s:.2,g:1}],[{w:"sawtooth",v:.4,a:.1,d:11},{w:"sine",v:5,t:.5,d:11,s:.2,g:1}],[{w:"sawtooth",v:.4,a:.1,d:11},{w:"sine",v:5,t:.5,d:11,s:.2,g:1}],[{w:"sine",v:.4,a:.1,d:11},{w:"sine",v:6,f:2.5,d:.05,s:1.1,g:1}],[{w:"sine",v:.3,d:.1,r:.1},{w:"square",v:4,t:3,d:1,s:.2,g:1}],[{w:"sine",v:.3,d:.5,r:.5},{w:"sine",v:7,t:2,f:2,d:1,r:1,g:1}],[{w:"triangle",v:.6,h:.03,d:.3,r:.3,t:.5},{w:"n0",v:8,t:1.5,d:.08,r:.08,g:1}],[{w:"sawtooth",v:.3,a:.03,s:.5},{w:"sawtooth",v:.2,t:2,f:2,d:1,s:2}],[{w:"sawtooth",v:.3,f:-2,a:.03,s:.5},{w:"sawtooth",v:.2,t:2,f:2,d:1,s:2}],[{w:"sawtooth",v:.2,a:.02,s:1},{w:"sawtooth",v:.2,t:2,f:2,a:1,d:1,s:1}],[{w:"sawtooth",v:.2,a:.02,s:1},{w:"sawtooth",v:.2,f:2,a:.02,d:1,s:1}],[{w:"triangle",v:.3,a:.03,s:1},{w:"sine",v:3,t:5,f:1,d:1,s:1,g:1}],[{w:"sine",v:.4,a:.03,s:.9},{w:"sine",v:1,t:2,f:3,d:.03,s:.2,g:1}],[{w:"triangle",v:.6,a:.05,s:.5},{w:"sine",v:1,f:.8,d:.2,s:.2,g:1}],[{w:"square",v:.15,a:.01,d:.2,r:.2,t:.5,h:.03},{w:"square",v:4,f:.5,d:.2,r:11,a:.01,g:1,h:.02},{w:"square",v:.15,t:4,f:1,a:.02,d:.15,r:.15,h:.03},{g:3,w:"square",v:4,f:-.5,a:.01,h:.02,d:.15,r:11}],[{w:"square",v:.2,a:.01,d:1,s:.6,r:.04},{w:"sine",v:1,d:.1,s:4,g:1}],[{w:"square",v:.2,a:.02,d:1,s:.5,r:.08},{w:"sine",v:1,d:.1,s:4,g:1}],[{w:"square",v:.2,a:.04,d:1,s:.4,r:.08},{w:"sine",v:1,d:.1,s:4,g:1}],[{w:"square",v:.15,a:.04,s:1},{w:"sine",v:2,d:.1,g:1}],[{w:"square",v:.2,a:.02,d:1,s:.5,r:.08},{w:"sine",v:1,d:.1,s:4,g:1}],[{w:"square",v:.2,a:.02,d:1,s:.6,r:.08},{w:"sine",v:1,f:.2,d:.1,s:4,g:1}],[{w:"square",v:.2,a:.02,d:.5,s:.7,r:.08},{w:"sine",v:1,d:.1,s:4,g:1}],[{w:"square",v:.2,a:.02,d:1,s:.5,r:.08},{w:"sine",v:1,d:.1,s:4,g:1}],[{w:"square",v:.2,a:.02,d:2,s:.6},{w:"sine",v:2,d:1,g:1}],[{w:"square",v:.2,a:.02,d:2,s:.6},{w:"sine",v:2,d:1,g:1}],[{w:"square",v:.2,a:.02,d:1,s:.6},{w:"sine",v:2,d:1,g:1}],[{w:"square",v:.2,a:.02,d:1,s:.6},{w:"sine",v:2,d:1,g:1}],[{w:"sine",v:.4,a:.02,d:.7,s:.5},{w:"square",v:5,t:2,d:.2,s:.5,g:1}],[{w:"sine",v:.3,a:.05,d:.2,s:.8},{w:"sawtooth",v:6,f:.1,d:.1,s:.3,g:1}],[{w:"sine",v:.3,a:.03,d:.2,s:.4},{w:"square",v:7,f:.2,d:1,s:.1,g:1}],[{w:"square",v:.2,a:.05,d:.1,s:.8},{w:"square",v:4,d:.1,s:1.1,g:1}],[{w:"sine",a:.02,d:2},{w:"sine",v:6,t:2,d:.04,g:1}],[{w:"sine",v:.7,a:.03,d:.4,s:.4},{w:"sine",v:4,t:2,f:.2,d:.4,g:1}],[{w:"sine",v:.7,a:.02,d:.4,s:.6},{w:"sine",v:3,t:2,d:0,s:1,g:1}],[{w:"sine",v:.4,a:.06,d:.3,s:.3},{w:"sine",v:7,t:2,d:.2,s:.2,g:1}],[{w:"sine",a:.02,d:.3,s:.3},{w:"sawtooth",v:3,t:2,d:.3,g:1}],[{w:"sine",v:.4,a:.02,d:2,s:.1},{w:"sawtooth",v:8,t:2,f:1,d:.5,g:1}],[{w:"sine",v:.7,a:.03,d:.5,s:.3},{w:"sine",v:.003,t:0,f:4,d:.1,s:.002,g:1}],[{w:"sine",v:.7,a:.02,d:2},{w:"sine",v:1,t:2,f:1,d:.02,g:1}],[{w:"square",v:.3,d:1,s:.5},{w:"square",v:1,f:.2,d:1,s:.5,g:1}],[{w:"sawtooth",v:.3,d:2,s:.5},{w:"square",v:2,f:.1,s:.5,g:1}],[{w:"triangle",v:.5,a:.05,d:2,s:.6},{w:"sine",v:4,t:2,g:1}],[{w:"triangle",v:.3,a:.01,d:2,s:.3},{w:"sine",v:22,t:2,f:1,d:.03,s:.2,g:1}],[{w:"sawtooth",v:.3,d:1,s:.5},{w:"sine",v:11,t:11,a:.2,d:.05,s:.3,g:1}],[{w:"sine",v:.3,a:.06,d:1,s:.5},{w:"sine",v:7,f:1,d:1,s:.2,g:1}],[{w:"sawtooth",v:.3,a:.03,d:.7,s:.3,r:.2},{w:"sawtooth",v:.3,t:.75,d:.7,a:.1,s:.3,r:.2}],[{w:"triangle",v:.3,a:.01,d:.7,s:.5},{w:"square",v:5,t:.5,d:.7,s:.5,g:1}],[{w:"triangle",v:.3,a:.02,d:.3,s:.3,r:.3},{w:"square",v:3,t:4,f:1,a:.02,d:.1,s:1,g:1},{w:"triangle",v:.08,t:.5,a:.1,h:0,d:.1,s:.5,r:.1,b:0,c:0}],[{w:"sine",v:.3,a:.05,d:1,s:.7,r:.3},{w:"sine",v:2,f:1,d:.3,s:1,g:1}],[{w:"square",v:.3,a:.03,d:.5,s:.3,r:.1},{w:"square",v:4,f:1,a:.03,d:.1,g:1}],[{w:"triangle",v:.3,a:.08,d:1,s:.3,r:.1},{w:"square",v:2,f:1,d:.3,s:.3,g:1,t:4,a:.08}],[{w:"sine",v:.3,a:.05,d:1,s:.3,r:.1},{w:"sine",v:.1,t:2.001,f:1,d:1,s:50,g:1}],[{w:"triangle",v:.3,a:.03,d:.7,s:.3,r:.2},{w:"sine",v:12,t:7,f:1,d:.5,s:1.7,g:1}],[{w:"sine",v:.3,a:.05,d:1,s:.3,r:.1},{w:"sawtooth",v:22,t:6,d:.06,s:.3,g:1}],[{w:"triangle",v:.3,a:.05,d:11,r:.3},{w:"triangle",v:1,d:1,s:8,g:1}],[{w:"sawtooth",v:.3,d:4,s:.8,r:.1},{w:"square",v:1,t:2,f:8,a:1,d:1,s:1,r:.1,g:1}],[{w:"triangle",v:.3,d:1,s:.5,t:.8,a:.2,p:1.25,q:.2},{w:"sawtooth",v:.2,a:.2,d:.3,s:1,t:1.2,p:1.25,q:.2}],[{w:"sine",v:.3,d:1,s:.3},{w:"square",v:22,t:11,d:.5,s:.1,g:1}],[{w:"sawtooth",v:.3,a:.04,d:1,s:.8,r:.1},{w:"square",v:1,t:.5,d:1,s:2,g:1}],[{w:"triangle",v:.3,d:1,s:.3},{w:"sine",v:22,t:6,d:.6,s:.05,g:1}],[{w:"sine",v:.6,a:.1,d:.05,s:.4},{w:"sine",v:5,t:5,f:1,d:.05,s:.3,g:1}],[{w:"sine",a:.1,d:.05,s:.4,v:.8},{w:"sine",v:5,t:5,f:1,d:.05,s:.3,g:1}],[{w:"square",v:.3,a:.1,d:.1,s:.4},{w:"square",v:1,f:1,d:.3,s:.1,g:1}],[{w:"sawtooth",v:.3,d:.5,r:.5},{w:"sawtooth",v:11,t:5,d:.05,g:1}],[{w:"square",v:.3,d:.2,r:.2},{w:"square",v:7,t:3,d:.05,g:1}],[{w:"triangle",d:.2,r:.2},{w:"square",v:9,t:3,d:.1,r:.1,g:1}],[{w:"triangle",d:.3,r:.3},{w:"square",v:6,t:3,d:1,r:1,g:1}],[{w:"triangle",v:.4,d:.2,r:.2},{w:"square",v:22,t:12,d:.1,r:.1,g:1}],[{w:"sine",v:.25,a:.02,d:.05,s:.8},{w:"square",v:1,t:2,d:.03,s:11,g:1}],[{w:"sine",v:.3,a:.05,d:11},{w:"square",v:7,t:3,f:1,s:.7,g:1}],[{w:"square",v:.3,a:.05,d:.1,s:.8},{w:"square",v:4,d:.1,s:1.1,g:1}],[{w:"sine",v:.4,d:.3,r:.3},{w:"sine",v:7,t:9,d:.1,r:.1,g:1}],[{w:"sine",v:.7,d:.1,r:.1},{w:"sine",v:22,t:7,d:.05,g:1}],[{w:"sine",v:.6,d:.15,r:.15},{w:"square",v:11,t:3.2,d:.1,r:.1,g:1}],[{w:"sine",v:.8,d:.07,r:.07},{w:"square",v:11,t:7,r:.01,g:1}],[{w:"triangle",v:.7,t:.5,d:.2,r:.2,p:.95},{w:"n0",v:9,g:1,d:.2,r:.2}],[{w:"sine",v:.7,d:.1,r:.1,p:.9},{w:"square",v:14,t:2,d:.005,r:.005,g:1}],[{w:"square",d:.15,r:.15,p:.5},{w:"square",v:4,t:5,d:.001,r:.001,g:1}],[{w:"n1",v:.3,a:1,s:1,d:.15,r:0,t:.5}],[{w:"sine",t:12.5,d:0,r:0,p:.5,v:.3,h:.2,q:.5},{g:1,w:"sine",v:1,t:2,d:0,r:0,s:1},{g:1,w:"n0",v:.2,t:2,a:.6,h:0,d:.1,r:.1,b:0,c:0}],[{w:"n0",v:.2,a:.05,h:.02,d:.02,r:.02}],[{w:"n0",v:.4,a:1,d:1,t:.25}],[{w:"sine",v:.3,a:.1,d:1,s:.5},{w:"sine",v:4,t:0,f:1.5,d:1,s:1,r:.1,g:1},{g:1,w:"sine",v:4,t:0,f:2,a:.6,h:0,d:.1,s:1,r:.1,b:0,c:0}],[{w:"square",v:.3,t:.25,d:11,s:1},{w:"square",v:12,t:0,f:8,d:1,s:1,r:11,g:1}],[{w:"n0",v:.4,t:.5,a:1,d:11,s:1,r:.5},{w:"square",v:1,t:0,f:14,d:1,s:1,r:11,g:1}],[{w:"sine",t:0,f:1221,a:.2,d:1,r:.25,s:1},{g:1,w:"n0",v:3,t:.5,d:1,s:1,r:1}],[{w:"sine",d:.4,r:.4,p:.1,t:2.5,v:1},{w:"n0",v:12,t:2,d:1,r:1,g:1}]],program0:[[{w:"triangle",v:.5,d:.7}],[{w:"triangle",v:.5,d:.7}],[{w:"triangle",v:.5,d:.7}],[{w:"triangle",v:.5,d:.7}],[{w:"triangle",v:.5,d:.7}],[{w:"triangle",v:.5,d:.7}],[{w:"sawtooth",v:.3,d:.7}],[{w:"sawtooth",v:.3,d:.7}],[{w:"sine",v:.5,d:.3,r:.3}],[{w:"triangle",v:.5,d:.3,r:.3}],[{w:"square",v:.2,d:.3,r:.3}],[{w:"square",v:.2,d:.3,r:.3}],[{w:"sine",v:.5,d:.1,r:.1}],[{w:"sine",v:.5,d:.1,r:.1}],[{w:"square",v:.2,d:1,r:1}],[{w:"sawtooth",v:.3,d:.7,r:.7}],[{w:"sine",v:.5,a:.01,s:1}],[{w:"sine",v:.7,d:.02,s:.7}],[{w:"square",v:.2,s:1}],[{w:"triangle",v:.5,a:.01,s:1}],[{w:"square",v:.2,a:.02,s:1}],[{w:"square",v:.2,a:.02,s:1}],[{w:"square",v:.2,a:.02,s:1}],[{w:"square",v:.2,a:.05,s:1}],[{w:"triangle",v:.5,d:.5}],[{w:"square",v:.2,d:.6}],[{w:"square",v:.2,d:.6}],[{w:"triangle",v:.8,d:.6}],[{w:"triangle",v:.4,d:.05}],[{w:"square",v:.2,d:1}],[{w:"square",v:.2,d:1}],[{w:"sine",v:.4,d:.6}],[{w:"triangle",v:.7,d:.4}],[{w:"triangle",v:.7,d:.7}],[{w:"triangle",v:.7,d:.7}],[{w:"triangle",v:.7,d:.7}],[{w:"square",v:.3,d:.2}],[{w:"square",v:.3,d:.2}],[{w:"square",v:.3,d:.1,s:.2}],[{w:"sawtooth",v:.4,d:.1,s:.2}],[{w:"sawtooth",v:.2,a:.02,s:1}],[{w:"sawtooth",v:.2,a:.02,s:1}],[{w:"sawtooth",v:.2,a:.02,s:1}],[{w:"sawtooth",v:.2,a:.02,s:1}],[{w:"sawtooth",v:.2,a:.02,s:1}],[{w:"sawtooth",v:.3,d:.1}],[{w:"sawtooth",v:.3,d:.5,r:.5}],[{w:"triangle",v:.6,d:.1,r:.1,h:.03,p:.8}],[{w:"sawtooth",v:.2,a:.02,s:1}],[{w:"sawtooth",v:.2,a:.02,s:1}],[{w:"sawtooth",v:.2,a:.02,s:1}],[{w:"sawtooth",v:.2,a:.02,s:1}],[{w:"triangle",v:.3,a:.03,s:1}],[{w:"sine",v:.3,a:.03,s:1}],[{w:"triangle",v:.3,a:.05,s:1}],[{w:"sawtooth",v:.5,a:.01,d:.1}],[{w:"square",v:.3,a:.05,d:.2,s:.6}],[{w:"square",v:.3,a:.05,d:.2,s:.6}],[{w:"square",v:.3,a:.05,d:.2,s:.6}],[{w:"square",v:.2,a:.05,d:.01,s:1}],[{w:"square",v:.3,a:.05,s:1}],[{w:"square",v:.3,s:.7}],[{w:"square",v:.3,s:.7}],[{w:"square",v:.3,s:.7}],[{w:"square",v:.3,a:.02,d:2}],[{w:"square",v:.3,a:.02,d:2}],[{w:"square",v:.3,a:.03,d:2}],[{w:"square",v:.3,a:.04,d:2}],[{w:"square",v:.3,a:.02,d:2}],[{w:"square",v:.3,a:.05,d:2}],[{w:"square",v:.3,a:.03,d:2}],[{w:"square",v:.3,a:.03,d:2}],[{w:"sine",v:.7,a:.02,d:2}],[{w:"sine",v:.7,a:.02,d:2}],[{w:"sine",v:.7,a:.02,d:2}],[{w:"sine",v:.7,a:.02,d:2}],[{w:"sine",v:.7,a:.02,d:2}],[{w:"sine",v:.7,a:.02,d:2}],[{w:"sine",v:.7,a:.02,d:2}],[{w:"sine",v:.7,a:.02,d:2}],[{w:"square",v:.3,s:.7}],[{w:"sawtooth",v:.4,s:.7}],[{w:"triangle",v:.5,s:.7}],[{w:"sawtooth",v:.4,s:.7}],[{w:"sawtooth",v:.4,d:12}],[{w:"sine",v:.4,a:.06,d:12}],[{w:"sawtooth",v:.4,d:12}],[{w:"sawtooth",v:.4,d:12}],[{w:"sawtooth",v:.3,d:12}],[{w:"triangle",v:.5,d:12}],[{w:"square",v:.3,d:12}],[{w:"triangle",v:.5,a:.08,d:11}],[{w:"sawtooth",v:.5,a:.05,d:11}],[{w:"sawtooth",v:.5,d:11}],[{w:"triangle",v:.5,d:11}],[{w:"triangle",v:.5,d:11}],[{w:"triangle",v:.5,d:11}],[{w:"triangle",v:.5,d:11}],[{w:"square",v:.3,d:11}],[{w:"sawtooth",v:.5,a:.04,d:11}],[{w:"sawtooth",v:.5,d:11}],[{w:"triangle",v:.5,a:.8,d:11}],[{w:"triangle",v:.5,d:11}],[{w:"square",v:.3,d:11}],[{w:"sawtooth",v:.3,d:1,r:1}],[{w:"sawtooth",v:.5,d:.3}],[{w:"sawtooth",v:.5,d:.3,r:.3}],[{w:"sawtooth",v:.5,d:.3,r:.3}],[{w:"square",v:.3,d:.2,r:.2}],[{w:"square",v:.3,a:.02,d:2}],[{w:"sawtooth",v:.2,a:.02,d:.7}],[{w:"triangle",v:.5,d:1}],[{w:"sawtooth",v:.3,d:.3,r:.3}],[{w:"sine",v:.8,d:.1,r:.1}],[{w:"square",v:.2,d:.1,r:.1,p:1.05}],[{w:"sine",v:.8,d:.05,r:.05}],[{w:"triangle",v:.5,d:.1,r:.1,p:.96}],[{w:"triangle",v:.5,d:.1,r:.1,p:.97}],[{w:"square",v:.3,d:.1,r:.1}],[{w:"n1",v:.3,a:1,s:1,d:.15,r:0,t:.5}],[{w:"triangle",v:.5,d:.03,t:0,f:1332,r:.001,p:1.1}],[{w:"n0",v:.2,t:.1,d:.02,a:.05,h:.02,r:.02}],[{w:"n0",v:.4,a:1,d:1,t:.25}],[{w:"sine",v:.3,a:.8,d:1,t:0,f:1832}],[{w:"triangle",d:.5,t:0,f:444,s:1}],[{w:"n0",v:.4,d:1,t:0,f:22,s:1}],[{w:"n0",v:.5,a:.2,d:11,t:0,f:44}],[{w:"n0",v:.5,t:.25,d:.4,r:.4}]],drummap1:[[{w:"triangle",t:0,f:70,v:1,d:.05,h:.03,p:.9,q:.1},{w:"n0",g:1,t:6,v:17,r:.01,h:0,p:0}],[{w:"triangle",t:0,f:88,v:1,d:.05,h:.03,p:.5,q:.1},{w:"n0",g:1,t:5,v:42,r:.01,h:0,p:0}],[{w:"n0",f:222,p:0,t:0,r:.01,h:0}],[{w:"triangle",v:.3,f:180,d:.05,t:0,h:.03,p:.9,q:.1},{w:"n0",v:.6,t:0,f:70,h:.02,r:.01,p:0},{g:1,w:"square",v:2,t:0,f:360,r:.01,b:0,c:0}],[{w:"square",f:1150,v:.34,t:0,r:.03,h:.025,d:.03},{g:1,w:"n0",t:0,f:13,h:.025,d:.1,s:1,r:.1,v:1}],[{w:"triangle",f:200,v:1,d:.06,t:0,r:.06},{w:"n0",g:1,t:0,f:400,v:12,r:.02,d:.02}],[{w:"triangle",f:100,v:.9,d:.12,h:.02,p:.5,t:0,r:.12},{g:1,w:"n0",v:5,t:.4,h:.015,d:.005,r:.005}],[{w:"n1",f:390,v:.25,r:.01,t:0}],[{w:"triangle",f:120,v:.9,d:.12,h:.02,p:.5,t:0,r:.12},{g:1,w:"n0",v:5,t:.5,h:.015,d:.005,r:.005}],[{w:"n1",v:.25,f:390,r:.03,t:0,h:.005,d:.03}],[{w:"triangle",f:140,v:.9,d:.12,h:.02,p:.5,t:0,r:.12},{g:1,w:"n0",v:5,t:.3,h:.015,d:.005,r:.005}],[{w:"n1",v:.25,f:390,t:0,d:.2,r:.2},{w:"n0",v:.3,t:0,c:0,f:440,h:.005,d:.05}],[{w:"triangle",f:155,v:.9,d:.12,h:.02,p:.5,t:0,r:.12},{g:1,w:"n0",v:5,t:.3,h:.015,d:.005,r:.005}],[{w:"triangle",f:180,v:.9,d:.12,h:.02,p:.5,t:0,r:.12},{g:1,w:"n0",v:5,t:.3,h:.015,d:.005,r:.005}],[{w:"n1",v:.3,f:1200,d:.2,r:.2,h:.05,t:0},{w:"n1",t:0,v:1,d:.1,r:.1,p:1.2,f:440}],[{w:"triangle",f:220,v:.9,d:.12,h:.02,p:.5,t:0,r:.12},{g:1,w:"n0",v:5,t:.3,h:.015,d:.005,r:.005}],[{w:"n1",f:500,v:.15,d:.4,r:.4,h:0,t:0},{w:"n0",v:.1,t:0,r:.01,f:440}],[{w:"n1",v:.3,f:800,d:.2,r:.2,h:.05,t:0},{w:"square",t:0,v:1,d:.1,r:.1,p:.1,f:220,g:1}],[{w:"sine",f:1651,v:.15,d:.2,r:.2,h:0,t:0},{w:"sawtooth",g:1,t:1.21,v:7.2,d:.1,r:11,h:1},{g:1,w:"n0",v:3.1,t:.152,d:.002,r:.002}],null,[{w:"n1",v:.3,f:1200,d:.2,r:.2,h:.05,t:0},{w:"n1",t:0,v:1,d:.1,r:.1,p:1.2,f:440}],null,[{w:"n1",v:.3,f:555,d:.25,r:.25,h:.05,t:0},{w:"n1",t:0,v:1,d:.1,r:.1,f:440,a:.005,h:.02}],[{w:"sawtooth",f:776,v:.2,d:.3,t:0,r:.3},{g:1,w:"n0",v:2,t:0,f:776,a:.005,h:.02,d:.1,s:1,r:.1,c:0},{g:11,w:"sine",v:.1,t:0,f:22,d:.3,r:.3,b:0,c:0}],[{w:"n1",f:440,v:.15,d:.4,r:.4,h:0,t:0},{w:"n0",v:.4,t:0,r:.01,f:440}],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[{w:"sine",f:1720,v:.3,d:.02,t:0,r:.02},{w:"square",g:1,t:0,f:2876,v:6,d:.2,s:1,r:.2}],[{w:"sine",f:1720,v:.3,d:.25,t:0,r:.25},{w:"square",g:1,t:0,f:2876,v:6,d:.2,s:1,r:.2}]],drummap0:[[{w:"triangle",t:0,f:110,v:1,d:.05,h:.02,p:.1}],[{w:"triangle",t:0,f:150,v:.8,d:.1,p:.1,h:.02,r:.01}],[{w:"n0",f:392,v:.5,d:.01,p:0,t:0,r:.05}],[{w:"n0",f:33,d:.05,t:0}],[{w:"n0",f:100,v:.7,d:.03,t:0,r:.03,h:.02}],[{w:"n0",f:44,v:.7,d:.02,p:.1,t:0,h:.02}],[{w:"triangle",f:240,v:.9,d:.1,h:.02,p:.1,t:0}],[{w:"n0",f:440,v:.2,r:.01,t:0}],[{w:"triangle",f:270,v:.9,d:.1,h:.02,p:.1,t:0}],[{w:"n0",f:440,v:.2,d:.04,r:.04,t:0}],[{w:"triangle",f:300,v:.9,d:.1,h:.02,p:.1,t:0}],[{w:"n0",f:440,v:.2,d:.1,r:.1,h:.02,t:0}],[{w:"triangle",f:320,v:.9,d:.1,h:.02,p:.1,t:0}],[{w:"triangle",f:360,v:.9,d:.1,h:.02,p:.1,t:0}],[{w:"n0",f:150,v:.2,d:.1,r:.1,h:.05,t:0,p:.1}],[{w:"triangle",f:400,v:.9,d:.1,h:.02,p:.1,t:0}],[{w:"n0",f:150,v:.2,d:.1,r:.01,h:.05,t:0,p:.1}],[{w:"n0",f:150,v:.2,d:.1,r:.01,h:.05,t:0,p:.1}],[{w:"n0",f:440,v:.3,d:.1,p:.9,t:0,r:.1}],[{w:"n0",f:200,v:.2,d:.05,p:.9,t:0}],[{w:"n0",f:440,v:.3,d:.12,p:.9,t:0}],[{w:"sine",f:800,v:.4,d:.06,t:0}],[{w:"n0",f:150,v:.2,d:.1,r:.01,h:.05,t:0,p:.1}],[{w:"n0",f:33,v:.3,d:.2,p:.9,t:0}],[{w:"n0",f:300,v:.3,d:.14,p:.9,t:0}],[{w:"sine",f:200,d:.06,t:0}],[{w:"sine",f:150,d:.06,t:0}],[{w:"sine",f:300,t:0}],[{w:"sine",f:300,d:.06,t:0}],[{w:"sine",f:250,d:.06,t:0}],[{w:"square",f:300,v:.3,d:.06,p:.8,t:0}],[{w:"square",f:260,v:.3,d:.06,p:.8,t:0}],[{w:"sine",f:850,v:.5,d:.07,t:0}],[{w:"sine",f:790,v:.5,d:.07,t:0}],[{w:"n0",f:440,v:.3,a:.05,t:0}],[{w:"n0",f:440,v:.3,a:.05,t:0}],[{w:"triangle",f:1800,v:.4,p:.9,t:0,h:.03}],[{w:"triangle",f:1800,v:.3,p:.9,t:0,h:.13}],[{w:"n0",f:330,v:.3,a:.02,t:0,r:.01}],[{w:"n0",f:330,v:.3,a:.02,t:0,h:.04,r:.01}],[{w:"n0",f:440,v:.3,t:0}],[{w:"sine",f:800,t:0}],[{w:"sine",f:700,t:0}],[{w:"n0",f:330,v:.3,t:0}],[{w:"n0",f:330,v:.3,t:0,h:.1,r:.01,p:.7}],[{w:"sine",t:0,f:1200,v:.3,r:.01}],[{w:"sine",t:0,f:1200,v:.3,d:.2,r:.2}]],_guiInit:()=>{this.canvas&&(this.ctx=this.canvas.getContext("2d"),this.ctx.fillStyle="#000",this.ctx.fillRect(0,0,300,32),this.canvas.addEventListener("dragover",this.dragOver.bind(this),!1),this.canvas.addEventListener("dragleave",this.dragLeave.bind(this),!1),this.canvas.addEventListener("drop",this.execDrop.bind(this),!1),this.canvas.addEventListener("click",this.click.bind(this),!1),this.canvas.addEventListener("mousedown",this.pointerdown.bind(this),!1),this.canvas.addEventListener("mousemove",this.pointermove.bind(this),!1),this.canvas.addEventListener("touchstart",this.pointerdown.bind(this),!1),this.canvas.addEventListener("touchend",this.pointerup.bind(this),!1),this.canvas.addEventListener("touchcancel",this.pointerup.bind(this),!1),this.canvas.addEventListener("touchmove",this.pointermove.bind(this),!1))},_guiUpdate:()=>{if(this.canvas){this.ctx.fillStyle="#000",this.ctx.fillRect(0,0,300,32);var row1=8,row2=20;if(this.song?(row1=4,row2=24):(this.ctx.fillStyle="#fff",this.ctx.fillText("TinySynth",8,20)),this.graph){this.ctx.fillStyle="#800",this.ctx.fillRect(80,row1,132,4),this.ctx.fillRect(80,row2,132,4),this.ctx.fillStyle="#f00";for(let i=this.notetab.length-1;i>=0;--i){const nt=this.notetab[i];nt.f&&!this.rhythm[nt.ch]||(this.ctx.fillRect(80+nt.n,row1,4,4),this.ctx.fillRect(80+8*nt.ch,row2,6,4))}}this.perfmon&&(this.ctx.fillStyle="#fff",this.ctx.fillRect(180,30,28,-12),this.ctx.fillStyle="#000",this.ctx.fillText(this.notetab.length,185,28)),this.ctx.fillStyle="#fff",this.ctx.fillRect(250,15,32,2),this.ctx.fillStyle="#fff",this.ctx.strokeStyle="#000",this.ctx.beginPath(),this.ctx.arc(250+32*this.masterVol,16,6,0,6.28,0),this.ctx.moveTo(220,12),this.ctx.lineTo(224,12),this.ctx.lineTo(230,6),this.ctx.lineTo(230,26),this.ctx.lineTo(224,20),this.ctx.lineTo(220,20),this.ctx.fill(),this.ctx.stroke(),this.ctx.strokeStyle="#fff",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.arc(230,16,4,-1,1,!1),this.ctx.stroke(),this.ctx.beginPath(),this.ctx.arc(230,16,8,-1,1,!1),this.ctx.stroke(),0==this.masterVol&&(this.ctx.strokeStyle="#000",this.ctx.lineWidth=4,this.ctx.beginPath(),this.ctx.moveTo(220,7),this.ctx.lineTo(238,25),this.ctx.stroke(),this.ctx.strokeStyle="#fff",this.ctx.lineWidth=2,this.ctx.stroke()),this.song&&(this.ctx.fillStyle="#fff",this.ctx.fillRect(4,2,28,28),this.ctx.fillRect(80,15,128,2),this.ctx.fillStyle="#000",this.playing?(this.ctx.fillRect(12,10,4,12),this.ctx.fillRect(22,10,4,12)):(this.ctx.beginPath(),this.ctx.moveTo(12,9),this.ctx.lineTo(25,16),this.ctx.lineTo(12,23),this.ctx.fill()),this.ctx.fillStyle="#fff",this.ctx.fillText(this.toTime(this.playTick),38,14),this.ctx.fillText(this.toTime(this.maxTick),38,28),this.ctx.strokeStyle="#000",this.ctx.beginPath(),this.ctx.arc(80+this.playTick/this.maxTick*128,16,6,0,6.28,0),this.ctx.fill(),this.ctx.stroke()),this.waitdrop&&(this.ctx.fillStyle="rgba(0,0,0,0.7)",this.ctx.fillRect(0,0,300,32),this.ctx.fillStyle="#fff",this.ctx.fillText("Drop MIDI File Here",100,20))}},toTime:ti=>{const s=(ti=4*ti*60/this.song.timebase/this.song.tempo|0)%60;return("00"+(ti/60|0)).substr(-2)+":"+("00"+s).substr(-2)},preventScroll:e=>{e.preventDefault()},pointerup:ev=>{document.body.removeEventListener("touchstart",this.preventScroll,!1)},getPos:e=>{var p=e.target.getBoundingClientRect();return p.right!=p.left?{x:300*(e.clientX-p.left)/(p.right-p.left),y:e.clientY-p.top}:{x:0,y:0}},pointerdown:ev=>{let e=ev;if(ev.touches&&(e=ev.touches[0]),this.downpos=this.getPos(e),ev.touches||1&e.buttons){if(this.song&&this.downpos.x>=80&&this.downpos.x<=208){const p=(this.downpos.x-80)/128*this.maxTick;this.locateMIDI(p),document.body.addEventListener("touchstart",this.preventScroll,!1)}if(this.downpos.x>=250&&this.downpos.x<282){const p=(this.downpos.x-250)/32;this.setMasterVol(p),document.body.addEventListener("touchstart",this.preventScroll,!1)}}},pointermove:ev=>{let e=ev;if(ev.touches&&(e=ev.touches[0]),ev.touches||1&e.buttons){const pos=this.getPos(e);if(this.song&&pos.x>=70&&pos.x<=208){pos.x<80&&(pos.x=80);const p=(pos.x-80)/128*this.maxTick;this.locateMIDI(p)}if(pos.x>=250&&pos.x<282){const p=(pos.x-250)/32;this.setMasterVol(p)}}},click:e=>{const pos=this.getPos(e);pos.x<40&&this.song&&(this.playing?this.stopMIDI():this.song&&this.playMIDI()),pos.x>=215&&pos.x<243&&this.downpos.x>=215&&this.downpos.x<243&&(this.masterVol>0?(this.lastMasterVol=this.masterVol,this.masterVol=0):this.masterVol=this.lastMasterVol)},dragLeave:e=>{this.waitdrop=0},dragOver:e=>{this.waitdrop=1,e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"},execDrop:e=>{this.waitdrop=0;const f=e.dataTransfer.files;if(0==this.disabledrop){var reader=new FileReader;reader.onload=function(e){this.loadMIDI(reader.result)}.bind(this),reader.readAsArrayBuffer(f[0])}e.stopPropagation(),e.preventDefault()},ready:()=>new Promise((resolv=>{const timerid=setInterval((()=>{this.isReady&&(clearInterval(timerid),console.log("Initialized"),resolv())}),100)})),init:()=>{this.pg=[],this.vol=[],this.ex=[],this.bend=[],this.rpnidx=[],this.brange=[],this.sustain=[],this.notetab=[],this.rhythm=[],this.masterTuningC=0,this.masterTuningF=0,this.tuningC=[],this.tuningF=[],this.scaleTuning=[],this.maxTick=0,this.playTick=0,this.playing=0,this.releaseRatio=3.5;for(let i=0;i<16;++i)this.pg[i]=0,this.vol[i]=3e4/16129,this.bend[i]=0,this.brange[i]=256,this.tuningC[i]=0,this.tuningF[i]=0,this.scaleTuning[i]=[0,0,0,0,0,0,0,0,0,0,0,0],this.rhythm[i]=0;this.rhythm[9]=1,this.preroll=.2,this.relcnt=0,setInterval(function(){if(++this.relcnt>=3){this.relcnt=0;for(let i=this.notetab.length-1;i>=0;--i){var nt=this.notetab[i];this.actx.currentTime>nt.e&&(this._pruneNote(nt),this.notetab.splice(i,1))}}if(this.playing&&this.song.ev.length>0){let e=this.song.ev[this.playIndex];for(;this.actx.currentTime+this.preroll>this.playTime;)if(65361==e.m[0]?(this.song.tempo=e.m[1],this.tick2Time=240/this.song.tempo/this.song.timebase):this.send(e.m,this.playTime),++this.playIndex,this.playIndex>=this.song.ev.length){if(!this.loop){this.playTick=this.maxTick,this.playing=0;break}e=this.song.ev[this.playIndex=0],this.playTick=e.t}else e=this.song.ev[this.playIndex],this.playTime+=(e.t-this.playTick)*this.tick2Time,this.playTick=e.t}}.bind(this),60),console.log("internalcontext:"+this.internalcontext),this.internalcontext&&(window.AudioContext=window.AudioContext||window.webkitAudioContext,this.setAudioContext(new AudioContext)),this.isReady=1},setMasterVol:v=>{null!=v&&(this.masterVol=v),this.out&&(this.out.gain.value=this.masterVol)},setReverbLev:v=>{null!=v&&(this.reverbLev=v);var r=parseFloat(this.reverbLev);this.rev&&!isNaN(r)&&(this.rev.gain.value=8*r)},setLoop:f=>{this.loop=f},setVoices:v=>{this.voices=v},getPlayStatus:()=>({play:this.playing,maxTick:this.maxTick,curTick:this.playTick}),locateMIDI:tick=>{let i,p=this.playing;for(this.stopMIDI(),i=0;i<this.song.ev.length&&tick>this.song.ev[i].t;++i){var m=this.song.ev[i],ch=15&m.m[0];switch(240&m.m[0]){case 176:switch(m.m[1]){case 1:this.setModulation(ch,m.m[2]);break;case 7:this.setChVol(ch,m.m[2]);break;case 10:this.setPan(ch,m.m[2]);break;case 11:this.setExpression(ch,m.m[2]);break;case 64:this.setSustain(ch,m.m[2])}break;case 192:this.pg[15&m.m[0]]=m.m[1]}65361==m.m[0]&&(this.song.tempo=m.m[1])}this.song.ev[i]?(this.playIndex=i,this.playTick=this.song.ev[i].t):(this.playIndex=0,this.playTick=this.maxTick),p&&this.playMIDI()},getTimbreName:(m,n)=>0==m?this.program[n].name:this.drummap[n-35].name,loadMIDIfromSrc:()=>{this.loadMIDIUrl(this.src)},loadMIDIUrl:url=>{if(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,!0),xhr.responseType="arraybuffer",xhr.loadMIDI=this.loadMIDI.bind(this),xhr.onload=function(e){200==this.status&&this.loadMIDI(this.response)},xhr.send()}},reset:()=>{for(let i=0;i<16;++i)this.setProgram(i,0),this.setBendRange(i,256),this.setModulation(i,0),this.setChVol(i,100),this.setPan(i,64),this.resetAllControllers(i),this.allSoundOff(i),this.rhythm[i]=0,this.tuningC[i]=0,this.tuningF[i]=0;this.masterTuningC=0,this.masterTuningF=0,this.rhythm[9]=1},stopMIDI:()=>{this.playing=0;for(var i=0;i<16;++i)this.allSoundOff(i)},playMIDI:()=>{if(!this.song)return;const dummy=this.actx.createOscillator();dummy.connect(this.actx.destination),dummy.frequency.value=0,dummy.start(0),dummy.stop(this.actx.currentTime+.001),this.playTick>=this.maxTick&&(this.playTick=0,this.playIndex=0),this.playTime=this.actx.currentTime+.1,this.tick2Time=240/this.song.tempo/this.song.timebase,this.playing=1},loadMIDI:data=>{function Get2(s,i){return(s[i]<<8)+s[i+1]}function Get4(s,i){return(s[i]<<24)+(s[i+1]<<16)+(s[i+2]<<8)+s[i+3]}function GetStr(s,i,len){return String.fromCharCode.apply(null,s.slice(i,i+len))}function Delta(s,i){var v,d;for(v=0,datalen=1;128&(d=s[i]);)v=(v<<7)+(127&d),++datalen,++i;return(v<<7)+d}function Msg(song,tick,s,i){var v=s[i];switch(datalen=1,0==(128&v)&&(v=runst,datalen=0),runst=v,240&v){case 192:case 208:song.ev.push({t:tick,m:[v,s[i+datalen]]}),datalen+=1;break;case 240:switch(v){case 240:case 247:var len=Delta(s,i+1);datastart=1+datalen;var exd=Array.from(s.slice(i+datastart,i+datastart+len));exd.unshift(240),song.ev.push({t:tick,m:exd}),datalen+=len+1;break;case 255:len=Delta(s,i+2);switch(datastart=2+datalen,datalen=len+datalen+2,s[i+1]){case 2:song.copyright+=GetStr(s,i+datastart,datalen-3);break;case 1:case 3:case 4:case 9:song.text=GetStr(s,i+datastart,datalen-datastart);break;case 47:return 1;case 81:var val=Math.floor(6e7/function(s,i){return(s[i]<<16)+(s[i+1]<<8)+s[i+2]}(s,i+3));song.ev.push({t:tick,m:[65361,val]})}}break;default:song.ev.push({t:tick,m:[v,s[i+datalen],s[i+datalen+1]]}),datalen+=2}return 0}this.stopMIDI();var s=new Uint8Array(data),datalen=0,datastart=0,runst=144,idx=0,hd=s.slice(0,4);if("77,84,104,100"==hd.toString()){var len=Get4(s,4),numtrk=(Get2(s,8),Get2(s,10));this.maxTick=0;var tb=4*Get2(s,12);idx=len+8,this.song={copyright:"",text:"",tempo:120,timebase:tb,ev:[]};for(let tr=0;tr<numtrk;++tr){if(hd=s.slice(idx,idx+4),len=Get4(s,idx+4),"77,84,114,107"==hd.toString()){var tick=0,j=0;for(this.notetab.length=0;;){tick+=Delta(s,idx+8+j),j+=datalen;var e=Msg(this.song,tick,s,idx+8+j);if(j+=datalen,e)break}tick>this.maxTick&&(this.maxTick=tick)}idx+=len+8}this.song.ev.sort((function(x,y){return x.t-y.t})),this.reset(),this.locateMIDI(0)}},setQuality:q=>{null!=q&&(this.quality=q);for(let i=0;i<128;++i)this.setTimbre(0,i,this.program0[i]);for(let i=0;i<this.drummap0.length;++i)this.setTimbre(1,i+35,this.drummap0[i]);if(this.quality){for(let i=0;i<this.program1.length;++i)this.setTimbre(0,i,this.program1[i]);for(let i=0;i<this.drummap.length;++i)this.drummap1[i]&&this.setTimbre(1,i+35,this.drummap1[i])}},setTimbre:(m,n,p)=>{const defp={g:0,w:"sine",t:1,f:0,v:.5,a:0,h:.01,d:.01,s:0,r:.05,p:1,q:1,k:0};function filldef(p){for(n=0;n<p.length;++n)for(let k in defp)p[n].hasOwnProperty(k)&&void 0!==p[n][k]||(p[n][k]=defp[k]);return p}m&&n>=35&&n<=81&&(this.drummap[n-35].p=filldef(p)),0==m&&n>=0&&n<=127&&(this.program[n].p=filldef(p))},_pruneNote:nt=>{for(let k=nt.o.length-1;k>=0;--k){if(nt.o[k].frequency?nt.o[k].frequency.cancelScheduledValues(0):nt.o[k].playbackRate.cancelScheduledValues(0),nt.g[k].gain.cancelScheduledValues(0),nt.o[k].stop(),nt.o[k].detune)try{this.chmod[nt.ch].disconnect(nt.o[k].detune)}catch(e){}nt.g[k].gain.value=0}},_limitVoices:(ch,n)=>{this.notetab.sort((function(n1,n2){return n1.f!=n2.f?n1.f-n2.f:n1.e!=n2.e?n2.e-n1.e:n2.t-n1.t}));for(let i=this.notetab.length-1;i>=0;--i){var nt=this.notetab[i];(this.actx.currentTime>nt.e||i>=this.voices-1)&&(this._pruneNote(nt),this.notetab.splice(i,1))}},_note:(t,ch,n,v,p)=>{let out,sc,pn;const o=[],g=[],vp=[],fp=[],r=[],f=440*Math.pow(2,(n-69+this.masterTuningC+this.tuningC[ch]+(this.masterTuningF+this.tuningF[ch]/8192+this.scaleTuning[ch][n%12]))/12);this._limitVoices(ch,n);for(let i=0;i<p.length;++i){pn=p[i];const dt=t+pn.a+pn.h;if(0==pn.g?(out=this.chvol[ch],sc=v*v/16384,fp[i]=f*pn.t+pn.f):pn.g>10?(out=g[pn.g-11].gain,sc=1,fp[i]=fp[pn.g-11]*pn.t+pn.f):o[pn.g-1].frequency?(out=o[pn.g-1].frequency,sc=fp[pn.g-1],fp[i]=fp[pn.g-1]*pn.t+pn.f):(out=o[pn.g-1].playbackRate,sc=fp[pn.g-1]/440,fp[i]=fp[pn.g-1]*pn.t+pn.f),"n"===pn.w[0])o[i]=this.actx.createBufferSource(),o[i].buffer=this.noiseBuf[pn.w],o[i].loop=!0,o[i].playbackRate.value=fp[i]/440,1!=pn.p&&this._setParamTarget(o[i].playbackRate,fp[i]/440*pn.p,t,pn.q),o[i].detune&&(this.chmod[ch].connect(o[i].detune),o[i].detune.value=this.bend[ch]);else o[i]=this.actx.createOscillator(),o[i].frequency.value=fp[i],1!=pn.p&&this._setParamTarget(o[i].frequency,fp[i]*pn.p,t,pn.q),"w"==pn.w[0]?o[i].setPeriodicWave(this.wave[pn.w]):o[i].type=pn.w,o[i].detune&&(this.chmod[ch].connect(o[i].detune),o[i].detune.value=this.bend[ch]);g[i]=this.actx.createGain(),r[i]=pn.r,o[i].connect(g[i]),g[i].connect(out),vp[i]=sc*pn.v,pn.k&&(vp[i]*=Math.pow(2,(n-60)/12*pn.k)),pn.a?(g[i].gain.value=0,g[i].gain.setValueAtTime(0,t),g[i].gain.linearRampToValueAtTime(vp[i],t+pn.a)):g[i].gain.setValueAtTime(vp[i],t),this._setParamTarget(g[i].gain,pn.s*vp[i],dt,pn.d),o[i].start(t),this.rhythm[ch]&&(o[i].onended=()=>{try{o[i].detune&&this.chmod[ch].disconnect(o[i].detune)}catch(e){}},o[i].stop(t+p[0].d*this.releaseRatio))}this.rhythm[ch]||this.notetab.push({t:t,e:99999,ch:ch,n:n,o:o,g:g,t2:t+pn.a,v:vp,r:r,f:0})},_setParamTarget:(p,v,t,d)=>{0!=d?p.setTargetAtTime(v,t,d):p.setValueAtTime(v,t)},_releaseNote:(nt,t)=>{if(9!=nt.ch)for(let k=nt.g.length-1;k>=0;--k)nt.g[k].gain.cancelScheduledValues(t),t==nt.t2?nt.g[k].gain.setValueAtTime(nt.v[k],t):t<nt.t2&&nt.g[k].gain.setValueAtTime(nt.v[k]*(t-nt.t)/(nt.t2-nt.t),t),this._setParamTarget(nt.g[k].gain,0,t,nt.r[k]);nt.e=t+nt.r[0]*this.releaseRatio,nt.f=1},setModulation:(ch,v,t)=>{this.chmod[ch].gain.setValueAtTime(100*v/127,this._tsConv(t))},setChVol:(ch,v,t)=>{this.vol[ch]=3*v*v/16129,this.chvol[ch].gain.setValueAtTime(this.vol[ch]*this.ex[ch],this._tsConv(t))},setPan:(ch,v,t)=>{this.chpan[ch]&&this.chpan[ch].pan.setValueAtTime((v-64)/64,this._tsConv(t))},setExpression:(ch,v,t)=>{this.ex[ch]=v*v/16129,this.chvol[ch].gain.setValueAtTime(this.vol[ch]*this.ex[ch],this._tsConv(t))},setSustain:(ch,v,t)=>{if(this.sustain[ch]=v,t=this._tsConv(t),v<64)for(let i=this.notetab.length-1;i>=0;--i){const nt=this.notetab[i];t>=nt.t&&nt.ch==ch&&1==nt.f&&this._releaseNote(nt,t)}},allSoundOff:ch=>{for(let i=this.notetab.length-1;i>=0;--i){const nt=this.notetab[i];nt.ch==ch&&(this._pruneNote(nt),this.notetab.splice(i,1))}},resetAllControllers:ch=>{this.bend[ch]=0,this.ex[ch]=1,this.rpnidx[ch]=16383,this.sustain[ch]=0,this.chvol[ch]&&(this.chvol[ch].gain.value=this.vol[ch]*this.ex[ch],this.chmod[ch].gain.value=0)},setBendRange:(ch,v)=>{this.brange[ch]=v},setProgram:(ch,v)=>{this.debug&&console.log("Pg("+ch+")="+v),this.pg[ch]=v},_tsConv:t=>(null==t||t<=0?(t=0,this.actx&&(t=this.actx.currentTime)):this.tsmode&&(t=.001*t-this.tsdiff),t),setBend:(ch,v,t)=>{t=this._tsConv(t);const br=100*this.brange[ch]/127;this.bend[ch]=(v-8192)*br/8192;for(let i=this.notetab.length-1;i>=0;--i){const nt=this.notetab[i];if(nt.ch==ch)for(let k=nt.o.length-1;k>=0;--k)nt.o[k].frequency&&nt.o[k].detune&&nt.o[k].detune.setValueAtTime(this.bend[ch],t)}},noteOff:(ch,n,t)=>{if(!this.rhythm[ch]){t=this._tsConv(t);for(let i=this.notetab.length-1;i>=0;--i){const nt=this.notetab[i];t>=nt.t&&nt.ch==ch&&nt.n==n&&0==nt.f&&(nt.f=1,this.sustain[ch]<64&&this._releaseNote(nt,t))}}},noteOn:(ch,n,v,t)=>{0!=v?(t=this._tsConv(t),this.rhythm[ch]?n>=35&&n<=81&&this._note(t,ch,n,v,this.drummap[n-35].p):this._note(t,ch,n,v,this.program[this.pg[ch]].p)):this.noteOff(ch,n,t)},setTsMode:tsmode=>{this.tsmode=tsmode},send:(msg,t)=>{const ch=15&msg[0],cmd=-16&msg[0];if(!(cmd<128||cmd>=256))switch("suspended"==this.audioContext.state&&this.audioContext.resume(),cmd){case 176:switch(msg[1]){case 1:this.setModulation(ch,msg[2],t);break;case 7:this.setChVol(ch,msg[2],t);break;case 10:this.setPan(ch,msg[2],t);break;case 11:this.setExpression(ch,msg[2],t);break;case 64:this.setSustain(ch,msg[2],t);break;case 98:case 99:this.rpnidx[ch]=16383;break;case 100:this.rpnidx[ch]=16256&this.rpnidx[ch]|msg[2];break;case 101:this.rpnidx[ch]=127&this.rpnidx[ch]|msg[2]<<7;break;case 6:switch(this.rpnidx[ch]){case 0:this.brange[ch]=(msg[2]<<7)+(127&this.brange[ch]);break;case 1:this.tuningF[ch]=(msg[2]<<7)+(this.tuningF[ch]+8192&127)-8192;break;case 2:this.tuningC[ch]=msg[2]-64}break;case 38:switch(this.rpnidx[ch]){case 0:this.brange[ch]=16256&this.brange[ch]|msg[2];break;case 1:this.tuningF[ch]=(this.tuningF[ch]+8192&16256|msg[2])-8192}break;case 120:case 123:case 124:case 125:case 126:case 127:this.allSoundOff(ch);break;case 121:this.resetAllControllers(ch)}break;case 192:this.setProgram(ch,msg[1]);break;case 224:this.setBend(ch,msg[1]+(msg[2]<<7),t);break;case 144:this.noteOn(ch,msg[1],msg[2],t);break;case 128:this.noteOff(ch,msg[1],t);break;case 240:if(255==msg[0]){this.reset();break}if(254!=msg[0]&&this.debug){var ds=[];for(let ii=0;ii<msg.length;++ii)ds.push(msg[ii].toString(16))}if(240==msg[0]&&(127==msg[1]&&4==msg[3]&&(3==msg[4]&&msg.length>=8&&(this.masterTuningF=(128*msg[6]+msg[5]-8192)/8192),4==msg[4]&&msg.length>=8&&(this.masterTuningC=msg[6]-64)),65==msg[1]&&66==msg[3]&&18==msg[4]&&64==msg[5]))if(16==(240&msg[6])&&11==msg.length){const c=[9,0,1,2,3,4,5,6,7,8,10,11,12,13,14,15][15&msg[6]];21==msg[7]?this.rhythm[c]=msg[8]:msg[7]>=64&&msg[7]<=75&&(this.scaleTuning[c][msg[7]-64]=(msg[8]-64)/100)}else 0==msg[6]&&(0==msg[7]&&14==msg.length?this.masterTuningF=(4096*msg[8]+256*msg[9]+16*msg[10]+msg[11]-1024)/1e3:5==msg[7]&&11==msg.length&&(this.masterTuningC=msg[8]-64))}},_createWave:w=>{const imag=new Float32Array(w.length),real=new Float32Array(w.length);for(let i=1;i<w.length;++i)imag[i]=w[i];return this.actx.createPeriodicWave(real,imag)},getAudioContext:()=>this.actx,setAudioContext:(actx,dest)=>{this.audioContext=this.actx=actx,this.dest=dest,dest||(this.dest=actx.destination),this.tsdiff=.001*performance.now()-this.actx.currentTime,console.log("TSDiff:"+this.tsdiff),this.out=this.actx.createGain(),this.comp=this.actx.createDynamicsCompressor();var blen=.5*this.actx.sampleRate|0;this.convBuf=this.actx.createBuffer(2,blen,this.actx.sampleRate),this.noiseBuf={},this.noiseBuf.n0=this.actx.createBuffer(1,blen,this.actx.sampleRate),this.noiseBuf.n1=this.actx.createBuffer(1,blen,this.actx.sampleRate);var d1=this.convBuf.getChannelData(0),d2=this.convBuf.getChannelData(1),dn=this.noiseBuf.n0.getChannelData(0),dr=this.noiseBuf.n1.getChannelData(0);for(let i=0;i<blen;++i)i/blen<Math.random()&&(d1[i]=Math.exp(-3*i/blen)*(Math.random()-.5)*.5,d2[i]=Math.exp(-3*i/blen)*(Math.random()-.5)*.5),dn[i]=2*Math.random()-1;for(let jj=0;jj<64;++jj){const r1=10*Math.random()+1,r2=10*Math.random()+1;for(let i=0;i<blen;++i){var dd=Math.sin(i/blen*2*Math.PI*440*r1)*Math.sin(i/blen*2*Math.PI*440*r2);dr[i]+=dd/8}}this.useReverb&&(this.conv=this.actx.createConvolver(),this.conv.buffer=this.convBuf,this.rev=this.actx.createGain(),this.rev.gain.value=this.reverbLev,this.out.connect(this.conv),this.conv.connect(this.rev),this.rev.connect(this.comp)),this.setMasterVol(),this.out.connect(this.comp),this.comp.connect(this.dest),this.chvol=[],this.chmod=[],this.chpan=[],this.wave={w9999:this._createWave("w9999")},this.lfo=this.actx.createOscillator(),this.lfo.frequency.value=5,this.lfo.start(0);for(let i=0;i<16;++i)this.chvol[i]=this.actx.createGain(),this.actx.createStereoPanner?(this.chpan[i]=this.actx.createStereoPanner(),this.chvol[i].connect(this.chpan[i]),this.chpan[i].connect(this.out)):(this.chpan[i]=null,this.chvol[i].connect(this.out)),this.chmod[i]=this.actx.createGain(),this.lfo.connect(this.chmod[i]),this.pg[i]=0,this.resetAllControllers(i);this.setReverbLev(),this.reset(),this.send([144,60,1]),this.send([144,60,0])}})}if(window&&window.customElements){class WebAudioTinySynthElement extends HTMLElement{constructor(){super()}connectedCallback(){const div=document.createElement("div");div.innerHTML="<canvas\n    id='wa-canvas' width='300' height='32'\n    touch-action='none' tabindex='0'\n    style='\n      position:relative;\n      margin:0;\n      border:none;\n      width:300px;\n      height:32px;\n    '\n  ></canvas>\n  <div id='wa-logo'\n    style='\n      display:none;\n      position:absolute;\n      top:5px;\n      left:5px;\n      color:#fff;\n      font-size:8px;\n      background:rgba(0,0,0,0.5);\n    '\n  >TinySynth</div>",this.getAttr=(n,def)=>{let v=this.getAttribute(n);return""==v||null==v?def:"number"==typeof def?"true"==v?1:(v=+v,isNaN(v)?0:v):v},this.canvas=div.children[0],this.appendChild(div),WebAudioTinySynthCore.bind(this)(this);const plist=this.properties;for(let k in plist){const v=plist[k];v.observer?(this["_"+k]=v.value,Object.defineProperty(this,k,{get:()=>this["_"+k],set:val=>{this["_"+k]=val,this[v.observer]()}})):this[k]=v}for(let k in plist){const v=plist[k];this[k]=this.getAttr(k,v.value)}this.setQuality(1),this.init(),this._guiInit.bind(this)(),setInterval(this._guiUpdate.bind(this),100)}}window.customElements.define("webaudio-tinysynth",WebAudioTinySynthElement)}class WebAudioTinySynth{constructor(opt){WebAudioTinySynthCore.bind(this)(this);for(let k in this.properties)this[k]=this.properties[k].value;this.setQuality(1),opt&&(null!=opt.useReverb&&(this.useReverb=opt.useReverb),null!=opt.quality&&this.setQuality(opt.quality),null!=opt.voices&&this.setVoices(opt.voices)),this.init()}}"object"==typeof exports&&"undefined"!=typeof module?module.exports=WebAudioTinySynth:"function"==typeof define&&define.amd?define((function(){return WebAudioTinySynth})):window.WebAudioTinySynth=WebAudioTinySynth}(window);

function TinySynthMIDI() {
    var context = v3d.AudioContext.getContext();
    this.synth = new WebAudioTinySynth({internalContext: 0, useReverb: 0})
    this.synth.setAudioContext(context);

    this._muted = false;
    this._volume = 1;
}

Object.assign(TinySynthMIDI.prototype, {

    load: function(url) {
        this.synth.loadMIDIUrl(url);
        return this;
    },

    play: function() {
        this.synth.playMIDI();
    },

    pause: function() {
        this.synth.stopMIDI();
    },

    stop: function() {
        this.synth.stopMIDI();
        this.synth.locateMIDI(0);
    },

    rewind: function() {
        this.synth.locateMIDI(0);
    },

    setPlaybackTime: function(time) {
        this.synth.locateMIDI(time / this.synth.tick2Time);
    },

    getPlaybackTime: function() {
        return this.synth.getPlayStatus().curTick * this.synth.tick2Time || 0;
    },

    setPlaybackRate: function(rate) {
        // TODO: not implemented in TinySynth
    },

    getDuration: function() {
        return this.synth.getPlayStatus().maxTick * this.synth.tick2Time || 0;
    },

    isPlaying: function() {
        return !!this.synth.getPlayStatus().play;
    },

    setLoop: function(looped) {
        this.synth.setLoop(looped ? 1 : 0);
    },

    setVolume: function(volume) {
        this._volume = volume;
        if (!this._muted) {
            this.synth.setMasterVol(volume);
        }
    },

    setMuted: function(muted) {
        this._muted = muted;
        this.synth.setMasterVol(muted ? 0 : this._volume);
    },

});

// synthSound puzzle
function synthSound(type, channel, note, velocity, time, value, program) {

    if (!v3d.Detector.checkWebAudio()) {
        if (!_pGlob.noWebAudioReported) {
            _pGlob.noWebAudioReported = true;
            console.warn('puzzles: Web Audio API not supported');
        }
        return;
    }

    var synth;

    // one synth per all puzzles
    if (!_pGlob.webAudioTinySynth) {
        synth = new TinySynthMIDI().synth;
        _pGlob.webAudioTinySynth = synth;
    } else {
        synth = _pGlob.webAudioTinySynth;
    }


    time = time + synth.getAudioContext().currentTime;

    switch (type) {
    case 'NOTE_ON':
        synth.noteOn(channel, note, velocity, time);
        break;
    case 'NOTE_OFF':
        synth.noteOff(channel, note, time);
        break;
    case 'PROGRAM':
        synth.setProgram(channel, program);
        break;
    case 'VOLUME':
        synth.setChVol(channel, 127 * value, time);
        break;
    case 'PAN':
        synth.setPan(channel, 64 + 64 * value, time);
        break;
    case 'ALL_SOUND_OFF':
        synth.allSoundOff(channel);
        break;
    }
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    bindListener(elem, eventType, pickListener);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, pickListener);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, doubleTapCallback);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList, false);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && 'coordSystem' in scene.userData) {
        return scene.userData.coordSystem;
    }

    return 'Y_UP_RIGHT';
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
const eulerV3DToBlenderShortest = function() {

    const eulerTmp = new v3d.Euler();
    const eulerTmp2 = new v3d.Euler();
    const vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        const eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        const eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        const len = vec3Tmp.setFromEuler(eulerBlender).lengthSq();
        const lenAlt = vec3Tmp.setFromEuler(eulerBlenderAlt).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();

function intersectPlaneCSS(plane, cssX, cssY, dest) {
    const coords = _pGlob.vec2Tmp;
    const rc = _pGlob.raycasterTmp;
    coords.x = (cssX / appInstance.getWidth()) * 2 - 1;
    coords.y = - (cssY / appInstance.getHeight()) * 2 + 1;
    rc.setFromCamera(coords, appInstance.getCamera(true));
    return rc.ray.intersectPlane(plane, dest);
}

// dragMove puzzle
_pGlob.dragMoveOrigins = {};

function dragMove(objSelector, mode, blockId, parentDragOverBlockId) {
    const camera = appInstance.getCamera();
    if (!camera)
        return;

    if (!_pGlob.objDragOverInfoByBlock)
        return;

    const objNames = retrieveObjectNames(objSelector);

    const info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    const draggedObj = getObjectByName(info.draggedObjName);
    if (!draggedObj) return;

    if (!(blockId in _pGlob.dragMoveOrigins)) {
        _pGlob.dragMoveOrigins[blockId] = [];
    }
    const posOrigins = _pGlob.dragMoveOrigins[blockId];
    const lenDiff = objNames.length - posOrigins.length;
    for (let i = 0; i < lenDiff; i++) {
        posOrigins.push(new v3d.Vector3());
    }

    for (let i = 0; i < objNames.length; i++) {
        const obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        const posOrigin = posOrigins[i];

        const objParented = obj.parent && !obj.parent.isScene;
        const objCamParented = obj.parent && obj.parent.isCamera;

        if (!info.isMoved) {
            // the object position before the first move is used as an initial value
            posOrigin.copy(obj.position);
        }

        const coordSystem = getCoordSystem();
        const draggedWorldPos = draggedObj.getWorldPosition(_pGlob.vec3Tmp3);

        if (mode == 'X' || mode == 'Y' || mode == 'Z') {

            let axis = _pGlob.vec3Tmp;
            let coord;

            if (coordSystem == 'Z_UP_RIGHT' && !objCamParented) {
                axis.copy(mode == 'X' ? _pGlob.AXIS_X : (mode == 'Y' ? _pGlob.AXIS_Z : _pGlob.AXIS_Y));
                coord = mode == 'X' ? 'x' : (mode == 'Y' ? 'z' : 'y');
            } else {
                axis.copy(mode == 'X' ? _pGlob.AXIS_X : (mode == 'Y' ? _pGlob.AXIS_Y : _pGlob.AXIS_Z));
                coord = mode == 'X' ? 'x' : (mode == 'Y' ? 'y' : 'z');
            }

            if (objParented)
                axis.transformDirection(obj.matrixWorld);

            const planeNor = camera.getWorldDirection(_pGlob.vec3Tmp2);
            planeNor.cross(axis).cross(axis);

            const plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedWorldPos);

            const p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            const p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);

            if (p0 && p1) {
                if (objParented) {
                    const invWorld = _pGlob.mat4Tmp.copy(obj.matrixWorld).invert();
                    p0.applyMatrix4(invWorld);
                    p1.applyMatrix4(invWorld);
                }
                obj.position[coord] = posOrigin[coord] + p1[coord] - p0[coord];
            }
        } else if (mode == 'XY' || mode == 'XZ' || mode == 'YZ') {

            let normal = _pGlob.vec3Tmp;
            let coord0, coord1;

            if (coordSystem == 'Z_UP_RIGHT' && !objCamParented) {
                normal.copy(mode == 'XY' ? _pGlob.AXIS_Y : (mode == 'XZ' ? _pGlob.AXIS_Z : _pGlob.AXIS_X));
                coord0 = mode == 'XY' ? 'x' : (mode == 'XZ' ? 'x' : 'y');
                coord1 = mode == 'XY' ? 'z' : (mode == 'XZ' ? 'y' : 'z');
            } else {
                normal.copy(mode == 'XY' ? _pGlob.AXIS_Z : (mode == 'XZ' ? _pGlob.AXIS_Y : _pGlob.AXIS_X));
                coord0 = mode == 'XY' ? 'x' : (mode == 'XZ' ? 'x' : 'y');
                coord1 = mode == 'XY' ? 'y' : (mode == 'XZ' ? 'z' : 'z');
            }

            const plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(normal, draggedWorldPos);

            const p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            const p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                if (objParented) {
                    const invWorld = _pGlob.mat4Tmp.copy(obj.matrixWorld).invert();
                    p0.applyMatrix4(invWorld);
                    p1.applyMatrix4(invWorld);
                }
                obj.position[coord0] = posOrigin[coord0] + p1[coord0] - p0[coord0];
                obj.position[coord1] = posOrigin[coord1] + p1[coord1] - p0[coord1];
            }
        } else if (mode == 'XYZ') {
            const planeNor = camera.getWorldDirection(_pGlob.vec3Tmp);
            const plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedWorldPos);

            const p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            const p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                if (objParented) {
                    const invWorld = _pGlob.mat4Tmp.copy(obj.matrixWorld).invert();
                    p0.applyMatrix4(invWorld);
                    p1.applyMatrix4(invWorld);
                }
                obj.position.addVectors(posOrigin, p1).sub(p0);
            }
        }
        obj.updateMatrixWorld(true);
    }
}

function eventGetOffsetCoords(e, touchId, dest) {
    if (e instanceof MouseEvent) {
        dest.set(e.offsetX, e.offsetY);
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        var rect = e.target.getBoundingClientRect();
        var touches = e.touches;
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            touches = e.changedTouches;
        }

        var touch = touches[0];
        for (var i = 0; i < touches.length; i++) {
            if (touches[i].identifier == touchId) {
                touch = touches[i];
                break;
            }
        }

        dest.set(touch.clientX - rect.left, touch.clientY - rect.top);
    }
    return dest;
}

function eventTouchIdGetFirst(e) {
    if (e instanceof MouseEvent) {
        return -1;
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            return e.changedTouches[0].identifier;
        } else {
            return e.touches[0].identifier;
        }
    }
    return -1;
}

/**
 * For "touchstart", "touchend" and "touchmove" events returns true if a touch
 * object with the provided touch id is in the changedTouches array, otherwise
 * - false. For other events returns true.
 */
function eventTouchIdChangedFilter(e, touchId) {
    if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            var isChanged = false;
            for (var i = 0; i < e.changedTouches.length; i++) {
                if (e.changedTouches[i].identifier == touchId) {
                    isChanged = true;
                    break;
                }
            }
            return isChanged;
        }
    }

    return true;
}

function initDragOverInfo() {
    return {
        draggedObjName: '',
        downX: 0, downY: 0,
        prevX: 0, prevY: 0,
        currX: 0, currY: 0,
        isDowned: false,
        isMoved: false,
        touchId: -1
    };
}

/**
 * Remove the specified event listener from the specified target.
 */
function unbindListener(target, type, listener, optionsOrUseCapture) {
    const index = _pGlob.eventListeners.findIndex(elem => {
        return _checkListenersSame(elem.target, elem.type, elem.listener,
            elem.optionsOrUseCapture, target, type, listener,
            optionsOrUseCapture);
    });

    if (index !== -1) {
        target.removeEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.splice(index, 1);
    }
}

// whenDraggedOver puzzle
_pGlob.objDragOverInfoGlobal = [];
_pGlob.objDragOverInfoByBlock = {}

initObjectPicking(function(intersects, downEvent) {

    _pGlob.objDragOverInfoGlobal.forEach(function(el) {

        if (downEvent instanceof MouseEvent)
            if (el.mouseButtons.indexOf(downEvent.button) == -1)
                return;

        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj([el.objName], objName)) {
                el.callback({ downEvent: downEvent, draggedObjName: objName });
            }

        }

    });

}, 'mousedown', true);

// whenDraggedOver puzzle
function registerOnDrag(objSelector, xRay, mouseButtons, cbStart, cbMove, cbDrop, blockId) {

    var cb = function(cbParam) {

        if (appInstance.controls) {
            appInstance.controls.enabled = false;
        }

        if (!(blockId in _pGlob.objDragOverInfoByBlock)) {
            _pGlob.objDragOverInfoByBlock[blockId] = initDragOverInfo();
        }
        var info = _pGlob.objDragOverInfoByBlock[blockId];

        // NOTE: don't use more than one pointing event, e.g. don't process
        // some events related to multitouch actions
        if (info.isDowned) {
            return;
        }

        var touchId = eventTouchIdGetFirst(cbParam.downEvent);
        var coords = eventGetOffsetCoords(cbParam.downEvent, touchId,
                _pGlob.vec2Tmp);

        info.downX = info.prevX = info.currX = coords.x;
        info.downY = info.prevY = info.currY = coords.y;
        info.touchId = touchId;
        info.isDowned = true;
        info.isMoved = false;
        info.draggedObjName = cbParam.draggedObjName;

        cbStart(cbParam.downEvent);

        var elem = appInstance.container;

        var moveCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.prevX = info.currX;
            info.prevY = info.currY;
            info.currX = coords.x;
            info.currY = coords.y;
            cbMove(e);
            info.isMoved = true;
        }
        var upCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.currX = coords.x;
            info.currY = coords.y;
            info.prevX = info.currX;
            info.prevY = info.currY;
            cbDrop(e);
            info.isDowned = false;

            unbindListener(elem, 'mousemove', moveCb);
            unbindListener(elem, 'touchmove', moveCb);
            unbindListener(elem, 'mouseup', upCb);
            unbindListener(elem, 'touchend', upCb);
            if (appInstance.controls) {
                appInstance.controls.enabled = true;
            }
        }

        bindListener(elem, 'mousemove', moveCb);
        bindListener(elem, 'touchmove', moveCb);
        bindListener(elem, 'mouseup', upCb);
        bindListener(elem, 'touchend', upCb);
    }

    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        _pGlob.objDragOverInfoGlobal.push({
            objName: objName,
            callback: cb,
            xRay: xRay,
            mouseButtons: mouseButtons
        });
    }
}

// dragRotate puzzle
function dragRotate(objSelector, mode, isParentSpace, blockId, parentDragOverBlockId) {
    var camera = appInstance.getCamera(true);
    if (!camera)
        return;

    if (!_pGlob.objDragOverInfoByBlock)
        return;

    var objNames = retrieveObjectNames(objSelector);

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var coordSystem = getCoordSystem();

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        if (mode == "X" || mode == "Y" || mode == "Z") {
            var objPos = obj.getWorldPosition(_pGlob.vec3Tmp);
            objPos.project(camera);

            var objX = (objPos.x + 1) / 2 * appInstance.getWidth();
            var objY = (-objPos.y + 1) / 2 * appInstance.getHeight();
            var vecFrom = _pGlob.vec2Tmp.set(info.prevX - objX, objY - info.prevY);
            var vecTo = _pGlob.vec2Tmp2.set(info.currX - objX, objY - info.currY);

            if (coordSystem == 'Z_UP_RIGHT')
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y));
            else
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z));

            var quat = _pGlob.quatTmp.setFromAxisAngle(axis, vecTo.angle() - vecFrom.angle());

            // a rotation axis pointing backwards (i.e. co-directionally
            // aligned with the view vector) should have inverted rotation
            var objToCalcSpace = isParentSpace && obj.parent ? obj.parent : obj;
            axis.applyQuaternion(objToCalcSpace.getWorldQuaternion(_pGlob.quatTmp2));

            var viewVec = camera.getWorldDirection(_pGlob.vec3Tmp2);
            if (viewVec.dot(axis) > 0) {
                quat.conjugate();
            }

            if (isParentSpace) {
                obj.quaternion.premultiply(quat);
            } else {
                obj.quaternion.multiply(quat);
            }
            obj.updateMatrixWorld(true);
        }
    }
}


eventHTMLElem('mousedown', 'play_button', true, function(event) {

  operateAnimation('PLAY', 'Suzanne', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PLAY', 'Cube1', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PLAY', 'Sphere.001', null, null, 'AUTO', 1,
          function() {}, false);

      });
eventHTMLElem('mousedown', 'pause_button', true, function(event) {

  operateAnimation('PAUSE', 'Suzanne', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Cube1', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Sphere.001', null, null, 'AUTO', 1,
          function() {}, false);

      });
eventHTMLElem('mousedown', 'stop_button', true, function(event) {

  operateAnimation('STOP', 'Cube1', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('STOP', 'Sphere.001', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('STOP', 'Suzanne', null, null, 'AUTO', 1,
          function() {}, false);

      });
eventHTMLElem('mousedown', 'menu', true, function(event) {
  handleAnnot(true, 'Cup', 'chashka', 'Point of interest #1', 'poi1', undefined);
  handleAnnot(true, 'Name', 'text', 'Point of interest #2', 'poi2', undefined);
  handleAnnot(true, 'Sweet', 'Sphere.003', 'Point of interest #3', 'poi3', undefined);
  handleAnnot(true, 'Vaffel', 'Cube2', 'Point of interest #4', 'poi1', undefined);
});
eventHTMLElem('mousedown', 'sound', true, function(event) {
  if (s == true) {
    registerOnClick('chashka', false, false, [0,1,2], function() {
      synthSound('NOTE_ON', 0, getNoteNumber(0, 4), 100, 0, 0, 0);
    }, function() {});
    registerOnClick('Grid', false, false, [0,1,2], function() {
      synthSound('NOTE_ON', 1, getNoteNumber(8, 4), 100, 0, 0, 0);
    }, function() {});
    registerOnClick('text', false, false, [0,1,2], function() {
      synthSound('NOTE_ON', 2, getNoteNumber(3, 4), 100, 0, 0, 0);
    }, function() {});
  } else {
    synthSound('ALL_SOUND_OFF', 0, 60, 100, 0, 0, 0);
    synthSound('ALL_SOUND_OFF', 1, 60, 100, 0, 0, 0);
    synthSound('ALL_SOUND_OFF', 2, 60, 100, 0, 0, 0);
  }
});

s = false;

eventHTMLElem('mousedown', 'vaffel1', true, function(event) {
  registerOnDrag('Cube2', false, [0,1,2], function() {}, function() {
    dragMove('Cube2', 'Y', 'vkughN^89q}OMZE]|n`O', '(%z-*SR+Q:`v#^Ca8%sD');
  }, function() {}, '(%z-*SR+Q:`v#^Ca8%sD');
});
eventHTMLElem('mousedown', 'vaffel2', true, function(event) {
  registerOnDrag('Cube3', false, [0,1,2], function() {}, function() {
    dragMove('Cube3', 'Y', 'I^`c3D1;1eC1oM0P#h.1', 'D)YZJ]zFh?sbeXc:AxyG');
  }, function() {}, 'D)YZJ]zFh?sbeXc:AxyG');
  eventHTMLElem('mousedown', 'vaffel3', true, function(event) {
    registerOnDrag('Cube1', false, [0,1,2], function() {}, function() {
      dragRotate('Cube1', 'X', true, '|U@wSR*R{P^PfDk{_M`x', '(J;z`@Vi?l8(u=9ma+_?');
    }, function() {}, '(J;z`@Vi?l8(u=9ma+_?');
  });
});



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
